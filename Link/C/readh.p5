#!/usr/bin/perl
use v5.10;
use strict;
use warnings;
package ReadH;

$0 =~ m[ (.*?) / [^/]+ $ ]x or die "Could not find directory of $0\n";
my $mydir = $1;

do "$mydir/readh.pg5" # Perl 5 grammar
 or die $@ // $!;

my $preprocess = `which gcc` ? 'gcc -E' : `which cpp` ? 'cpp' : die "Cannot find cpp in PATH.\n";
my $nm = `which nm` ? 'nm -P -D' : die "Cannot find nm in PATH.\n";

our @header_files;
our @library_files;
#our @HEADER_DIRS = ($ENV{CPATH} && (split ':', $ENV{CPATH}), $ENV{C_INCLUDE_PATH} && (split ':', $ENV{C_INCLUDE_PATH}), '/usr/include');
#our @LIBRARY_DIRS = ($ENV{LIBRARY_PATH} && (split ':', $ENV{LIBRARY_PATH}), '/lib', '/usr/lib');


 # Classify arguments into headers and libraries.
for (@ARGV) {
	if (/.[hc]$/) {
		push @header_files, $_
	}
	else {
		push @library_files, $_
	};
};
if (!@header_files) {
	if (!@library_files) {
		die "$0: No header or library files specified.\n";
	};
	die "$0: No header files specified.\n";
};
if (!@library_files) {
	die "$0: No library files specified.\n";
};

 # Get linkable symbols from libraries.
 # symbol_name => library_file
our %library_symbols = map {
	my $shslib = my $lib = $_;
	$shslib =~ s/'/'\\''/g;
	my @sections = map [split /\s+/, $_], qx"$nm '$shslib'";
	@sections = grep {defined $_->[1] and $_->[1] eq 'T'} @sections;
	map { $_->[0] => $lib } @sections;
} @library_files;

 # Get preprocess header files.
our $processed_headers = join '', map {
	my $header = $_;
	$header =~ s/'/'\\''/g;  # shell safety
	readpipe "$preprocess '$header'";
} @header_files;

 # Run parser on headers.
 # The parse will put things in:
 # %typedefs
 # %variables
 # %functions
 # %structs
 # %unions

run_grammar($processed_headers);

sub resolve_type {
	our %typedefs;
	my $point = $_[1] // 0;
	if ($_[0]{type} eq 'typedeffed') {
		$point += $_[0]{point};
		resolve_type($typedefs{$_[0]{ident}}, $point)
	}
	else {
		$point += $_[0]{point};
		$_[0]{ident} . ' *' x $point;
	}
}


our %functions;
our %typedefs;

 # Print in a format that can be read quickly by Rakudo
for (grep {$functions{$_}{ident} ~~ @{[keys %library_symbols]}} keys %functions) {
	my $rt = resolve_type($functions{$_}{ret});
	my @at = map resolve_type($_->{type}), @{$functions{$_}{args}};
	next if grep /^struct/, $rt, @at;
	say join " : ",
	 $library_symbols{$functions{$_}{ident}},
	 $functions{$_}{ident},
	 $rt,
	 @at
};
